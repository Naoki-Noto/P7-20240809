#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Feb  4 16:04:41 2024

@author: nata
"""

import pandas as pd
from rdkit import Chem, DataStructs
from rdkit.Chem import AllChem, Descriptors
from copy import deepcopy
import numpy as np
from collections import defaultdict
from rdkit import RDLogger
RDLogger.DisableLog('rdApp.*')

positions = 100

def convert_to_corrected_list(a):
    if len(a)==1 or len(a)==0:
        b=deepcopy(a)
    else:
        b=deepcopy(a)
        index_pairs = []
        vector_list=[0]*len(a[0])

        for row in a:
            indices = [i for i, val in enumerate(row) if val !='']
            index_pairs.append(indices)
        #print(index_pairs)
        sorted_list = sorted(index_pairs, key=lambda x: (x[0], x[1]))
        cycle_number=[]
        for A in sorted_list:
            start,fin=A[0],A[1]
            for i in range(start,fin+1):
                vector_list[i]+=1
            cycle_number.append(vector_list[start])

        order_a=[]
        for x,fac_1 in enumerate(sorted_list):
            for y,fac_2 in enumerate(index_pairs):
                if fac_1==fac_2:
                    order_a.append(y)
                else:
                    pass

        for n,x in enumerate(order_a):
            for i,B in enumerate(b[x]):
                if B!='':
                    b[x][i]=cycle_number[n]
    return b


def remove_empty_rows(matrix):
    return [row for row in matrix if any(cell != '' for cell in row)]


Donors = ['C1=CC=C(N(C)C)C=C1',#D001
          'C1=CC=C(N2CCOCC2)C=C1',#D002
          'N1CCOCC1',#D003
          'N(C)C',#D004
          'C1=C2C=CC=CC2=C(N(C)C)C=C1',#D005
          'C1=C2C=CC=CC2=CC(N(C)C)=C1',#D006
          'C1=CC(C)=CC(C)=C1',#D007
          'C1=C(OC)C=C(OC)C=C1(OC)',#D008
          'C1=CC(OC)=CC(OC)=C1',#D009
          'N1C(C=CC=C2)=C2N(C4=CC=CC=C4)C3=CC=CC=C13',#D010
          'N1C(C=CC=C2)=C2C(C)(C)C3=CC=CC=C13',#D011
          'N1C(C=CC=C2)=C2C(=O)C3=CC=CC=C13',#D012
          'N1C2=C(C3=C1C=CC(Cl)=C3)C=C(Cl)C=C2',#D013
          'N1C(C=CC=C2)=C2SC3=CC=CC=C13',#D014
          'N1C(C=CC=C2)=C2OC3=CC=CC=C13',#D015
          'N(C)C1=CC=CC=C1',#D016
          'C1C2=C(C3=C1C=CC=C3)C=CC=C2',#D017
          'Si1C2=C(C3=C1C=CC=C3)C=CC=C2',#D018
          'P(C2=CC=CC=C2)C1=CC=CC=C1',#D019
          'N1C2=C(C3=C1N=CC=C3)C=CC=C2',#D020
          'N1C2=C(C3=C1C=CN=C3)C=NC=C2',#D021
          'N1C2=C(C3=C1C=CN=C3)C=CC=C2',#D022
          'N1C2=C(C3=C1C(C)=CC=C3)C=CC=C2(C)',#D023
          'C(C=C1)=CC=C1N2C3=C(C=CC=C3)C4=C2C=CC=C4',#D024
          'N(C1=CC=CC=C1)C2=CC=CC=C2',#D025
          'N(C1=CC=C(C)C=C1)C2=CC=C(C)C=C2',#D026
          'N(C1=CC=C(F)C=C1)C2=CC=C(F)C=C2',#D027
          'N1C2=C(C3=C1C=CC=C3)C=CC=C2',#D028
          'N1C2=C(C3=C1C=CC(C)=C3)C=C(C)C=C2',#D029
          'N1C2=C(C3=C1C=CC(F)=C3)C=C(F)C=C2',#D030
          ]

Acceptors = ['C1=CON=C1',#A1_A001_A002_A003
             'C1=COC=N1',#A2_A004_A005_A006
             'C1=CSC=N1',#A6_A007_A008_A009
             
             'C1=CC(C=CC=C2)=C2C3=C1C=CC=C3',#A010
             'C1=NC=C2C(NC=C2)=C1',#A012
             'C(C=C1)=CC2=C1N=C(O2)C3=CC=CC=C3',#A013
             'C(C=C1)=CC2=C1N=CO2',#A014_A015
             'C1=CC=C2C(SC=N2)=C1',#A016_A017
             'C(C=C12)=CC=C2N=CN1C',#A018_A019
             'C1=C2SC=NC2=CC3=C1N=CS3',#A020_A023
             'C1=C2OC=NC2=CC3=C1N=CO3',#A021_A024
             'C1=C2NC=NC2=CC3=C1NC=N3',#A025
             'C1=C2OC=CC2=CC3=C1C=CO3',#A022_A026
             'C(=CC=C1C2=CC=C3)C=C1SC2=N3',#A027
             'C(=CC=C1C2=CC=C3)C=C1S(=O)(=O)C2=C3',#A028
             'C1=CC=C2C(SC3=C2C=CC(C#N)=C3)=C1',#A029 
             'C(=CC=C1C2=CC=C3)C=C1SiHC2=N3',#A030
             'C(=NC=C1C2=CN=C3)C=C1SiC2=C3',#A031
             'C(=CC=C1C2=CC=C3)C=C1OC2=N3',#A032
             'C1=CC(C#N)=C(C#N)C(C#N)=C1',#A033
             'C(C=C1)=CC=C1C(=O)C(F)(F)(F)',#A034
             'C(C=C1)=CC=C1C=O',#A035
             'C(C=C1)=CC=C1C(=O)C',#A036
             'C(C=C1)=CC=C1S(=O)(=O)C',#A037
             'C1=C(C=O)C=CC(C=O)=C1',#A038
             'C1=C(C#N)C=C(C#N)C=C1(C#N)',#A039
             'C(C=C1)=CC=C1P(C2=CC=CC=C2)(C3=CC=CC=C3)=O',#A040
             'C1=CC=C2C=CC=C(C(=O)C3(=O))C2=C13',#A041
             'C1=C(F)C(F)=C(F)C(F)=C1(F)',#A042
             'C1=C(F)C(F)=CC(F)=C1(F)',#A043
             'C1=CC(C(=O)NC2(=O))=C2C=C1',#A044
             'C1=CC(C(=O)C=CC2(=O))=C2C=C1',#A045_A046
             'C1=CC(=O)C=CC1(=O)',#A047
             'C1=CC(=O)NC1(=O)',#A048_A049
             'C(C=C1)=CC=C1C=C3C(=C(C#N)C#N)C2=CC=CC=C2C3(=O)',#A050
             'C1=CC(C(=O)C=CN2)=C2C=C1',#A051
             'C(C=C1(C))=CC(C)=C1B2C3=CC=CC=C3B(C4=C2C=CC=C4)C5=C(C)C=CC=C5C',#A052
             'B(C2=C(C=C(C=C2C)C)C)C2=C(C=C(C=C2C)C)C',#A053
             'C(C=C12)=CC=C1C(=C(C#N)C#N)C3=CC=CC=C3C2(=O)',#A054
             'C(S1)=CC=C1C=C(C#N)C#N',#A055
             'C(S1)=CC=C1C=C3C(=C(C#N)C#N)C2=CC=CC=C2C3(=O)',#A056
             'C(C=C1)=NC=C1C2=CN=CC=C2',#A057
             'C1=CC2=C3C(C4=NC5=CC(C#N)=C(C#N)C=C5N=C24)=CC=CC3=C1',#A058
             'C(C=C1)=CC(C2=C3C=CC=C2)=C1C4=C3N=C(C#N)C(C#N)=N4',#A059_A060
             'C(N=C1)=NC=C1C#N',#A061
             'C1=CC=CC=N1',#A062_A063             
             'C1=CC(C=CC2=C3N=CC=C2)=C3N=C1',#A064_A065
             ]

Others = ['C1=CC=CC=C1',#O001
          'C1=CC=CS1',#O002
          'C#C',#O003
          'C=C',#O004
          'O',#O005
          'S',#OO006
          'C1=CC=CO1',#O007
          'C1=CC=CN1C',#O008
          'C1=CC2=C(S1)C=CS2',#O009
          'C(S1)=CC=C1C2=CC=CS2',#O010
          'C(=CC=C1C2=CC=C3)C=C1OC2=C3',#O011
          'C(=CC=C1C2=CC=C3)C=C1SC2=C3',#O012
          ]

class ChemicalSpace:
    def __init__(self):
        self.frag_atom=[['C','C','C','C','N','C','C','C','C'],#D001
                        ['C','C','C','C','N','C','C','O','C','C','C','C'],#D002
                        ['N','C','C','O','C','C'],#D003
                        ['N','C','C'],#D004                        
                        ['C','C','C','C','C','C','C','C','N','C','C','C','C'],#D005
                        ['C','C','C','C','C','C','C','C','C','N','C','C','C'],#D006
                        ['C','C','C','C','C','C','C','C'],#D007
                        ['C','C','O','C','C','C','O','C','C','C','O','C'],#D008
                        ['C','C','C','O','C','C','C','O','C','C'],#D009
                        ['N','C','C','C','C','C','C','N','C','C','C','C','C','C','C','C','C','C','C','C'],#D010
                        ['N','C','C','C','C','C','C','C','C','C','C','C','C','C','C','C'],#D011
                        ['N','C','C','C','C','C','C','C','O','C','C','C','C','C','C'],#D012
                        ['N','C','C','C','C','C','C','C','Cl','C','C','C','Cl','C','C'],#D013
                        ['N','C','C','C','C','C','C','S','C','C','C','C','C','C'],#D014
                        ['N','C','C','C','C','C','C','O','C','C','C','C','C','C'],#D015
                        ['N','C','C','C','C','C','C','C'],#D016
                        ['C','C','C','C','C','C','C','C','C','C','C','C','C'],#D017
                        ['[SiH]','C','C','C','C','C','C','C','C','C','C','C','C'],#D018
                        ['P','C','C','C','C','C','C','C','C','C','C','C','C'],#D019
                        ['N','C','C','C','C','N','C','C','C','C','C','C','C'],#D020
                        ['N','C','C','C','C','C','C','N','C','C','N','C','C'],#D021
                        ['N','C','C','C','C','C','C','N','C','C','C','C','C'],#D022
                        ['N','C','C','C','C','C','C','C','C','C','C','C','C','C','C'],#D023                        
                        ['C','C','C','C','C','C','N','C','C','C','C','C','C','C','C','C','C','C','C'],#D024
                        ['N','C','C','C','C','C','C','C','C','C','C','C','C'],#D025
                        ['N','C','C','C','C','C','C','C','C','C','C','C','C','C','C'],#D026     
                        ['N','C','C','C','C','F','C','C','C','C','C','C','F','C','C'],#D027
                        ['N','C','C','C','C','C','C','C','C','C','C','C','C'],#D028
                        ['N','C','C','C','C','C','C','C','C','C','C','C','C','C','C'],#D029
                        ['N','C','C','C','C','C','C','C','F','C','C','C','F','C','C'],#D030
                        
                        ['C','C','O','N','C'],#A1_A001_A002_A003
                        ['C','C','O','C','N'],#A2_A004_A005_A006
                        ['C','C','S','C','N'],#A6_A007_A008_A009
                        ['C','C','C','C','C','C','C','C','C','C','C','C','C','C'],#A010_A011
                        ['C','N','C','C','C','N','C','C','C'],#A012
                        ['C','C','C','C','C','C','N','C','O','C','C','C','C','C','C'],#A013
                        ['C','C','C','C','C','C','N','C','O'],#A014_A015
                        ['C','C','C','C','C','S','C','N','C'],#A016_A017
                        ['C','C','C','C','C','C','N','C','N','C'],#A018_A019
                        ['C','C','S','C','N','C','C','C','C','N','C','S'],#A020_A023
                        ['C','C','O','C','N','C','C','C','C','N','C','O'],#A021_A024
                        ['C','C','N','C','N','C','C','C','C','N','C','N'],#A025
                        ['C','C','O','C','C','C','C','C','C','C','C','O'],#A022_A026
                        ['C','C','C','C','C','C','C','C','C','C','S','C','N'],#A027
                        ['C','C','C','C','C','C','C','C','C','C','S','O','O','C','C'],#A028
                        ['C','C','C','C','C','S','C','C','C','C','C','C','N','C','C'],#A029 
                        ['C','C','C','C','C','C','C','C','C','C','[SiH2]','C','N'],#A030
                        ['C','N','C','C','C','C','N','C','C','C','[SiH2]','C','C'],#A031
                        ['C','C','C','C','C','C','C','C','C','C','O','C','N'],#A032
                        ['C','C','C','C','N','C','C','N','C','C','N','C'],#A033
                        ['C','C','C','C','C','C','C','O','C','F','F','F'],#A034
                        ['C','C','C','C','C','C','C','O'],#A035
                        ['C','C','C','C','C','C','C','O','C'],#A036
                        ['C','C','C','C','C','C','S','O','O','C'],#A037
                        ['C','C','C','O','C','C','C','C','O','C'],#AA038
                        ['C','C','C','N','C','C','C','N','C','C','C','N'],#A039
                        ['C','C','C','C','C','C','P','C','C','C','C','C','C','C','C','C','C','C','C','O'],#A040
                        ['C','C','C','C','C','C','C','C','C','O','C','O','C','C'],#A041
                        ['C','C','F','C','F','C','F','C','F','C','F'],#A042
                        ['C','C','F','C','F','C','C','F','C','F'],#A043
                        ['C','C','C','C','O','N','C','O','C','C','C'],#A044
                        ['C','C','C','C','O','C','C','C','O','C','C','C'],#A045_A046
                        ['C','C','C','O','C','C','C','O'],#A047
                        ['C','C','C','O','N','C','O'],#A048_A049
                        ['C','C','C','C','C','C','C','C','C','C','C','N','C','N','C','C','C','C','C','C','C','O'],#A050
                        ['C','C','C','C','O','C','C','N','C','C','C'],#A051
                        ['C','C','C','C','C','C','C','C','B','C','C','C','C','C','C','B','C','C','C','C','C','C','C','C','C','C','C','C','C','C'],#A052
                        ['B','C','C','C','C','C','C','C','C','C','C','C','C','C','C','C','C','C','C'],#A053
                        ['C','C','C','C','C','C','C','C','C','N','C','N','C','C','C','C','C','C','C','O'],#A054
                        ['C','S','C','C','C','C','C','C','N','C','N'],#A055
                        ['C','S','C','C','C','C','C','C','C','C','N','C','N','C','C','C','C','C','C','C','O'],#A056
                        ['C','C','C','N','C','C','C','C','N','C','C','C'],#A057
                        ['C','C','C','C','C','C','N','C','C','C','C','N','C','C','N','C','C','N','C','C','C','C','C','C'],#A058
                        ['C','C','C','C','C','C','C','C','C','C','C','C','C','C','N','C','C','N','C','C','N','N'],#A059
                        ['C','N','C','N','C','C','C','N'],#A061
                        ['C','C','C','C','C','N'],#A062,A063
                        ['C','C','C','C','C','C','C','N','C','C','C','C','N','C'],#A064_A065
                        
                        ['C','C','C','C','C','C'],#O001
                        ['C','C','C','C','S'],#O002
                        ['C','C'],#O003
                        ['C','C'],#O004
                        ['O'],#O005
                        ['S'],#O006
                        ['C','C','C','C','O'],#O007
                        ['C','C','C','C','N','C'],#O008
                        ['C','C','C','C','S','C','C','S'],#O009
                        ['C','S','C','C','C','C','C','C','C','S'],#O010
                        ['C','C','C','C','C','C','C','C','C','C','O','C','C'],#O011
                        ['C','C','C','C','C','C','C','C','C','C','S','C','C'],#O012
                        ]                     
                            
        self.frag_branch=[[['','','','','(','(','','',''],['','','','','',')',')','','']],#D001
                          [['','','','','(','','','','','','',''],['','','','','','','','','',')','','']],#D002
                          [['','','','','',''],['','','','','','']],#D003
                          [['','(',''],['',')','']],#D004
                          [['','','','','','','','','(','(','','',''],['','','','','','','','','',')',')','','']],#D005
                          [['','','','','','','','','','(','(','',''],['','','','','','','','','','',')',')','']],#D006
                          [['','','','(','','','(',''],['','','',')','','',')','']],#D007
                          [['','','(','','','','(','','','','(',''],['','','',')','','','',')','','','',')']],#D008
                          [['','','','(','','','','(','',''],['','','','',')','','','',')','']],#D009
                          [['','','(','','','','','','(','','','','','','','','','','',''],['','','','','',')','','','','','','','',')','','','','','','']],#D010
                          [['','','(','','','','','','(','(','','','','','',''],['','','','','',')','','',')',')','','','','','','']],#D011
                          [['','','(','','','','','','(','','','','','',''],['','','','','',')','','',')','','','','','','']],#D012
                          [['','','','(','','','','','(','','','','(','',''],['','','','','','','','',')',')','','',')','','']],#D013
                          [['','','(','','','','','','','','','','',''],['','','','','',')','','','','','','','','']],#D014
                          [['','','(','','','','','','','','','','',''],['','','','','',')','','','','','','','','']],#D015
                          [['','(','','','','','',''],['',')','','','','','','']],#D016
                          [['','','','(','','','','','','','','',''],['','','','','','','','',')','','','','']],#D017
                          [['','','','(','','','','','','','','',''],['','','','','','','','',')','','','','']],#D018
                          [['','(','','','','','','','','','','',''],['','','','','','',')','','','','','','']],#D019
                          [['','','','(','','','','','','','','',''],['','','','','','','','',')','','','','']],#D020
                          [['','','','(','','','','','','','','',''],['','','','','','','','',')','','','','']],#D021
                          [['','','','(','','','','','','','','',''],['','','','','','','','',')','','','','']],#D022
                          [['','','','(','','','(','','','','','','','','('],['','','','','','',')','','',')','','','','',')']],#D023
                          [['','(','','','','','','','','(','','','','','','','','',''],['','',')','','','','','','','','','',')','','','','','','']],#D024
                          [['','(','','','','','','','','','','',''],['','','','','','',')','','','','','','']],#D025
                          [['','(','','','','(','','','','','','','(','',''],['','','','','',')','',')','','','','',')','','']],#D026
                          [['','(','','','','(','','','','','','','(','',''],['','','','','',')','',')','','','','',')','','']],#D027
                          [['','','','(','','','','','','','','',''],['','','','','','','','',')','','','','']],#D028
                          [['','','','(','','','','','(','','','','(','',''],['','','','','','','','',')',')','','',')','','']],#D029
                          [['','','','(','','','','','(','','','','(','',''],['','','','','','','','',')',')','','',')','','']],#D030
                        
                          [['','','','',''],['','','','','']],#A1_A001_A002_A003
                          [['','','','',''],['','','','','']],#A2_A004_A005_A006
                          [['','','','',''],['','','','','']],#A6_A007_A008_A009
                          [['','','','(','','','','','','','','','',''],['','','','','','',')','','','','','','','']],#A010_A011
                          [['','','','','','(','','',''],['','','','','','','',')','']],#A012
                          [['','(','','','','','','','(','','','','','',''],['','',')','','','','','',')','','','','','','']],#A013
                          [['','(','','','','','','',''],['','',')','','','','','','']],#A014_A015
                          [['','','','','','(','','',''],['','','','','','','',')','']],#A016_A017
                          [['','(','','','','','','','',''],['','',')','','','','','','','']],#A018_A019
                          [['','','','','','','','','','','',''],['','','','','','','','','','','','']],#A020_A023
                          [['','','','','','','','','','','',''],['','','','','','','','','','','','']],#A021_A024
                          [['','','','','','','','','','','',''],['','','','','','','','','','','','']],#A025
                          [['','','','','','','','','','','',''],['','','','','','','','','','','','']],#A022_A026
                          [['','(','','','','','','','','','','',''],['','','','','','','',')','','','','','']],#A027
                          [['','(','','','','','','','','','','(','(','',''],['','','','','','','',')','','','',')',')','','']],#A028
                          [['','','','','','(','','','','','','(','','',''],['','','','','','','','','','','','',')',')','']],#A029 
                          [['','(','','','','','','','','','','',''],['','','','','','','',')','','','','','']],#A030
                          [['','(','','','','','','','','','','',''],['','','','','','','',')','','','','','']],#A031
                          [['','(','','','','','','','','','','',''],['','','','','','','',')','','','','','']],#A032
                          [['','','','(','','','(','','','(','',''],['','','','',')','','',')','','',')','']],#A033
                          [['','(','','','','','','(','','(','(','('],['','',')','','','','',')','',')',')',')']],#A034
                          [['','(','','','','','',''],['','',')','','','','','']],#A035
                          [['','(','','','','','','(',''],['','',')','','','','',')','']],#A036
                          [['','(','','','','','','(','(',''],['','',')','','','','',')',')','']],#A037
                          [['','','(','','','','','(','',''],['','','',')','','','','',')','']],#AA038
                          [['','','(','','','','(','','','','(',''],['','','',')','','','',')','','','',')']],#A039
                          [['','(','','','','','','(','','','','','','(','','','','','',''],['','',')','','','','','','','','','',')','','','','','',')','']],#A040
                          [['','','','','','','','','(','(','','(','',''],['','','','','','','','','',')','','))','','']],#A041
                          [['','','(','','(','','(','','(','','('],['','',')','',')','',')','',')','',')']],#A042
                          [['','','(','','(','','','(','','('],['','',')','',')','','',')','',')']],#A043
                          [['','','','(','(','','','(','','',''],['','','','',')','','','))','','','']],#A044
                          [['','','','(','(','','','','(','','',''],['','','','',')','','','','))','','','']],#A045_A046
                          [['','','','(','','','','('],['','','',')','','','',')']],#A047
                          [['','','','(','','','('],['','','',')','','',')']],#A048_A049
                          [['','(','','','','','','','','(','(','','','','','','','','','','','('],['','',')','','','','','','','','',')','',')','','','','','','','',')']],#A050
                          [['','','','(','(','','','','','',''],['','','','',')','','',')','','','']],#A051
                          [['','(','','(','','','(','','','','','','','','','','(','','','','','','','','(','','','','',''],['','','','))','','',')','','','','','','','','','','','','','','',')','','',')','','','','','']],#A052
                          [['','(','','(','','(','','','','','','','(','','(','','','',''],['','','','','','','',')',')',')','','','','','','',')',')','']],#A053
                          [['','(','','','','','','(','(','','','','','','','','','','','('],['','',')','','','','','','',')','',')','','','','','','','',')']],#A054
                          [['','(','','','','','','(','','',''],['',')','','','','','','',')','','']],#A055
                          [['','(','','','','','','','(','(','','','','','','','','','','','('],['',')','','','','','','','','',')','',')','','','','','','','',')']],#A056
                          [['','(','','','','','','','','','',''],['','',')','','','','','','','','','']],#A057
                          [['','','','','','(','','','','','(','','','(','','','','','','','','','',''],['','','','','','','','','','','',')','','',')','','','',')','','','','','']],#A058
                          [['','(','','','','(','','','','','','','','','','','(','','','(','',''],['','',')','','','','','','','',')','','','','','','',')','','',')','']],#A059
                          [['','(','','','','','',''],['','',')','','','','','']],#A061
                          [['','','','','',''],['','','','','','']],#A062_A063
                          [['','','','(','','','','','','','','','',''],['','','','','','','','','','',')','','','']],#A064_A065
                          
                          [['','','','','',''],['','','','','','']],#O001
                          [['','','','',''],['','','','','']],#O002
                          [['',''],['','']],#O003
                          [['',''],['','']],#O004
                          [[''],['']],#O005
                          [[''],['']],#O006
                          [['','','','',''],['','','','','']],#O007
                          [['','','','','',''],['','','','','','']],#O008
                          [['','','','','(','','',''],['','','','',')','','','']],#O009
                          [['','(','','','','','','','',''],['',')','','','','','','','','']],#O010
                          [['','(','','','','','','','','','','',''],['','','','','','','',')','','','','','']],#O011
                          [['','(','','','','','','','','','','',''],['','','','','','','',')','','','','','']],#O012
                          ]
                        
                    
        self.frag_cycle=[['1','','','','','','','','1'],#D001
                         [['1','','','','','','','','','','','1'],['','','','','1','','','','','1','','']],#D002
                         ['1','','','','','1'],#D003
                         ['','',''],#D004
                         [['1','','','','','','','','','','','','1'],['','1','','','','','1','','','','','','']],#D005
                         [['1','','','','','','','','','','','','1'],['','1','','','','','1','','','','','','']],#D006
                         ['1','','','','','','','1'],#D007
                         ['1','','','','','','','','','1','',''],#D008
                         ['1','','','','','','','','','1'],#D009
                         [['1','','','','','','','','','','','','','','','','','','','1'],['','','','','','1','1','','','','','','','','','','','','',''],['','','','','','','','','','','','','','','1','','','','','1'],['','','','','','','','','1','','','','','1','','','','','','']],#010
                         [['1','','','','','','','','','','','','','','','1'],['','','','','','1','1','','','','','','','','',''],['','','','','','','','','','','1','','','','','1']],#D011
                         [['1','','','','','','','','','','','','','','1'],['','','','','','1','1','','','','','','','',''],['','','','','','','','','','1','','','','','1']],#D012
                         [['1','','','','1','','','','','','','','','',''],['','1','','','','','','','','','','','','','1'],['','','','1','','','','','','1','','','','','']],#D013
                         [['1','','','','','','','','','','','','','1'],['','','','','','1','1','','','','','','',''],['','','','','','','','','1','','','','','1']],#D014
                         [['1','','','','','','','','','','','','','1'],['','','','','','1','1','','','','','','',''],['','','','','','','','','1','','','','','1']],#D015
                         ['','','1','','','','','1'],#D016
                         [['1','','','','1','','','','','','','',''],['','1','','','','','','','','','','','1'],['','','','1','','','','','1','','','','']],#D017
                         [['1','','','','1','','','','','','','',''],['','1','','','','','','','','','','','1'],['','','','1','','','','','1','','','','']],#D018
                         [['','','','','','','','1','','','','','1'],['','1','','','','','1','','','','','','']],#D019
                         [['1','','','','1','','','','','','','',''],['','1','','','','','','','','','','','1'],['','','','1','','','','','1','','','','']],#D020
                         [['1','','','','1','','','','','','','',''],['','1','','','','','','','','','','','1'],['','','','1','','','','','1','','','','']],#D021
                         [['1','','','','1','','','','','','','',''],['','1','','','','','','','','','','','1'],['','','','1','','','','','1','','','','']],#D022
                         [['1','','','','1','','','','','','','','','',''],['','1','','','','','','','','','','','','1',''],['','','','1','','','','','','1','','','','','']],#D023
                         [['','','1','','','1','','','','','','','','','','','','',''],['','','','','','','1','','','','','','','','1','','','',''],['','','','','','','','1','','','','','1','','','','','',''],['','','','','','','','','','','','','','1','','','','','1']],#D024
                         [['','1','','','','','1','','','','','',''],['','','','','','','','1','','','','','1']],#D025
                         [['','1','','','','','','1','','','','','','',''],['','','','','','','','','1','','','','','','1']],#D026
                         [['','1','','','','','','1','','','','','','',''],['','','','','','','','','1','','','','','','1']],#D027                     
                         [['1','','','','1','','','','','','','',''],['','1','','','','','','','','','','','1'],['','','','1','','','','','1','','','','']],#D028
                         [['1','','','','1','','','','','','','','','',''],['','1','','','','','','','','','','','','','1'],['','','','1','','','','','','1','','','','','']],#D029     
                         [['1','','','','1','','','','','','','','','',''],['','1','','','','','','','','','','','','','1'],['','','','1','','','','','','1','','','','','']],#D030
                         
                         ['1','','','','1'],#A1_A001_A002_A003
                         ['1','','','','1'],#A2_A004_A005_A006                     
                         ['1','','','','1'],#A6_A007_A008_A009
                         [['1','','','','','','','','','1','','','',''],['','','','','','','1','1','','','','','',''],['','','','','','','','','1','','','','','1']],#A010_A011
                         [['1','','','','','','','','1'],['','','','1','','','','1','']],#A012
                         [['','','1','','','1','','','','','','','','',''],['','','','','1','','','','1','','','','','',''],['','','','','','','','','','1','','','','','1']],#A013
                         [['','','1','','','1','','',''],['','','','','1','','','','1']],#A014_A015
                         [['1','','','','','','','','1'],['','','','1','','','','1','']],#A016_A017
                         [['','','1','','','','','','1',''],['','','1','','','1','','','','']],#A018_A019
                         [['1','','','','','','','','1','','',''],['','1','','','','1','','','','','',''],['','','','','','','','1','','','','1']],#A020_A023
                         [['1','','','','','','','','1','','',''],['','1','','','','1','','','','','',''],['','','','','','','','1','','','','1']],#A021_A024
                         [['1','','','','','','','','1','','',''],['','1','','','','1','','','','','',''],['','','','','','','','1','','','','1']],#A025
                         [['1','','','','','','','','1','','',''],['','1','','','','1','','','','','',''],['','','','','','','','1','','','','1']],#A022_A026
                         [['','','','1','','','','','','1','','',''],['','','','','1','','','','','','','1',''],['','','','','','','','1','','','','','1']],#A027
                         [['','','','1','','','','','','1','','','','',''],['','','','','1','','','','','','','','','1',''],['','','','','','','','1','','','','','','','1']],#A028
                         [['1','','','','','','','','','','','','','','1'],['','','','1','','','','1','','','','','','',''],['','','','','','','1','','','','','','','1','']],#A029 
                         [['','','','1','','','','','','1','','',''],['','','','','1','','','','','','','1',''],['','','','','','','','1','','','','','1']],#A030
                         [['','','','1','','','','','','1','','',''],['','','','','1','','','','','','','1',''],['','','','','','','','1','','','','','1']],#A031
                         [['','','','1','','','','','','1','','',''],['','','','','1','','','','','','','1',''],['','','','','','','','1','','','','','1']],#A032
                         ['1','','','','','','','','','','','1'],#A033
                         ['','','1','','','1','','','','','',''],#A034
                         ['','','1','','','1','',''],#A035
                         ['','','1','','','1','','',''],#A036
                         ['','','1','','','1','','','',''],#A037
                         ['1','','','','','','','','','1'],#AA038
                         ['1','','','','','','','','','1','',''],#A039
                         [['','','1','','','1','','','','','','','','','','','','','',''],['','','','','','','','1','','','','','1','','','','','','',''],['','','','','','','','','','','','','','1','','','','','1','']],#A040
                         [['1','','','','','','','','','','','','','1'],['','','','1','','','','','','','','','1',''],['','','','','','','','','','','1','','','1']],#A041
                         ['1','','','','','','','','','1',''],#A042
                         ['1','','','','','','','','1',''],#A043
                         [['1','','','','','','','','','','1'],['','','','','','','1','','1','','']],#A044
                         [['1','','','','','','','','','','','1'],['','','','','','','','1','','1','','']],#A045_A046
                         ['1','','','','','','1',''],#A047
                         ['1','','','','','1',''],#A048_A049
                         [['','','1','','','1','','','','','','','','','','','','','','','',''],['','','','','','','','','','','','','','','1','','','','','1','',''],['','','','','','','','1','','','','','','','','','','','','','1','']],#A050
                         [['1','','','','','','','','','','1'],['','','','','','','','1','1','','']],#A051

                         [['','1','','','','','1','','','','','','','','','','','',''],['','','','','','','','','','','1','','','','','1','','','']],#A053
                         [['','','1','','','1','','','','','','','2','','','','','2','',''],['','','1','','','','','','','','','','','','','','','','1','']],#A054
                         ['','1','','','1','','','','','',''],#A055
                         [['','1','','','1','','','','','','','','','','','','','','','',''],['','','','','','','','','','','','','','1','','','','','1','',''],['','','','','','','1','','','','','','','','','','','','','1','']],#A056
                         [['','','1','','','1','','','','','',''],['','','','','','','1','','','','','1']],#A057
                         [['1','','','','','','','','','','','','','','','','','','','','','','','1'],['','','1','','','','','','','','','','','','','','','','1','','','','',''],['','','','1','','','','','','','','','','','','','','','','','','','1',''],['','','','','','1','','','','','','','','','','','','','1','','','','',''],['','','','','','','','1','','','','','','','','','1','','','','','','','']],#A058
                         [['','','1','','','','','','','','','1','','','','','','','','','',''],['','','','','','1','','','','','1','','','','','','','','','','',''],['','','','','','','1','','','','','','','1','','','','','','','',''],['','','','','','','','','','','','','1','','','','','','','','','1']],#A059
                         ['','','1','','','1','',''],#A061
                         ['1','','','','','1'],#A062_A063
                         [['1','','','','','','','','','','','','','1'],['','','','','','1','','','','','1','','',''],['','','','','','','1','','','','','1','','']],#A064_A065
                         
                         ['1','','','','','1'],#O001
                         ['1','','','','1'],#O002
                         ['',''],#O003
                         ['',''],#O004
                         [''],#O005
                         [''],#O006
                         ['1','','','','1'],#O007
                         ['1','','','','1',''],#O008
                         [['1','','','','1','','',''],['','','1','','','','','1']],#O009
                         [['','1','','','1','','','','',''],['','','','','','1','','','','1']],#O010
                         [['','','','1','','','','','','1','','',''],['','','','','1','','','','','','','1',''],['','','','','','','','1','','','','','1']],#O011
                         [['','','','1','','','','','','1','','',''],['','','','','1','','','','','','','1',''],['','','','','','','','1','','','','','1']],#O012
                         ]
        
        self.frag_bond=[['','=','','=','','','','','='],#D001
                        ['','=','','=','','','','','','','','='],#D002
                        ['','','','','',''],#D003
                        ['','',''],#D004
                        ['','=','','=','','=','','=','','','','','='],#D005
                        ['','=','','=','','=','','=','','','','','='],#D006
                        ['','=','','','=','','','='],#D007
                        ['','=','','','','=','','','','=','',''],#D008
                        ['','=','','','','=','','','','='],#D009
                        ['','','','=','','=','=','','','=','','=','','=','','=','','=','','='],#010
                        ['','','','=','','=','=','','','','','=','','=','','='],#D011
                        ['','','','=','','=','=','','=','','=','','=','','='],#D012
                        ['','','=','','=','','=','','','=','','=','','','='],#D013
                        ['','','','=','','=','=','','','=','','=','','='],#D014
                        ['','','','=','','=','=','','','=','','=','','='],#D015
                        ['','','','=','','=','','='],#D016
                        ['','','=','','=','','=','','=','','=','','='],#D017
                        ['','','=','','=','','=','','=','','=','','='],#D018
                        ['','','=','','=','','=','','=','','=','','='],#D019
                        ['','','=','','=','','=','','=','','=','','='],#D020
                        ['','','=','','=','','=','','=','','=','','='],#D021
                        ['','','=','','=','','=','','=','','=','','='],#D022
                        ['','','=','','=','','','=','','=','','=','','=',''],#D023
                        ['','','=','=','','=','','','=','','=','','=','','=','','=','','='],#D024
                        ['','','=','','=','','=','','=','','=','','='],#D025
                        ['','','=','','=','','','=','','=','','=','','','='],#D026
                        ['','','=','','=','','','=','','=','','=','','','='],#D027
                        ['','','=','','=','','=','','=','','=','','='],#D028
                        ['','','=','','=','','=','','','=','','=','','','='],#D029
                        ['','','=','','=','','=','','','=','','=','','','='],#D030
                        
                        
                        ['','=','','','='],#A1_A001_A002_A003
                        ['','=','','','='],#A2_A004_A005_A006
                        ['','=','','','='],#A6_A007_A008_A009
                        ['','=','','','=','','=','=','','=','','=','','='],#A010_A011
                        ['','=','','=','','','','=','='],#A012
                        ['','','=','=','','=','','=','','','=','','=','','='],#A013
                        ['','','=','=','','=','','=',''],#A014_A015
                        ['','=','','=','','','','=','='],#A016_A017
                        ['','','=','=','','=','','=','',''],#A018_A019
                        ['','=','','','=','','=','','=','','=',''],#A020_A023
                        ['','=','','','=','','=','','=','','=',''],#A021_A024
                        ['','=','','','=','','=','','=','','','='],#A025
                        ['','=','','','=','','=','','=','','=',''],#A022_A026
                        ['','=','','=','','=','','=','','=','','','='],#A027
                        ['','=','','=','','=','','=','','=','','=','=','','='],#A028
                        ['','=','','=','','','','=','','=','','','#','=','='],#A029 
                        ['','=','','=','','=','','=','','=','','','='],#A030
                        ['','=','','=','','=','','=','','=','','','='],#A031
                        ['','=','','=','','=','','=','','=','','','='],#A032
                        ['','=','','','#','=','','#','','','#','='],#A033
                        ['','','=','=','','=','','=','','','',''],#A034
                        ['','','=','=','','=','','='],#A035
                        ['','','=','=','','=','','=',''],#A036
                        ['','','=','=','','=','','=','=',''],#A037
                        ['','=','','=','','=','','','=','='],#AA038
                        ['','=','','#','','=','','#','','=','','#'],#A039
                        ['','','=','=','','=','','','=','','=','','=','','=','','=','','=','='],#A040
                        ['','=','','=','','=','','=','','=','','=','','='],#A041
                        ['','=','','','','=','','','','=',''],#A042
                        ['','=','','','','=','','','=',''],#A043
                        ['','=','','','=','','','=','=','','='],#A044
                        ['','=','','','=','','=','','=','=','','='],#A045_A046
                        ['','=','','=','','=','','='],#A047
                        ['','=','','=','','','='],#A048_A049
                        ['','','=','=','','=','','=','','=','','#','','#','','=','','=','','=','','='],#A050
                        ['','=','','','=','','=','','=','','='],#A051
                        ['','','=','','=','','','=','','','=','','=','','=','','','=','','=','','=','','=','','','=','','=',''],#A052
                        ['','','=','','=','','=','','','','','=','','=','','=','','',''],#A053
                        ['','','=','=','','=','','=','','#','','#','','=','','=','','=','','='],#A054
                        ['','','=','','=','','=','','#','','#'],#A055
                        ['','','=','','=','','=','','=','','#','','#','','=','','=','','=','','='],#A056
                        ['','','=','=','','=','','=','','=','','='],#A057
                        ['','=','','=','','','=','','=','','','#','=','','#','','=','','=','=','','=','','='],#A058
                        ['','','=','=','','','=','','=','','=','=','','=','','=','','#','','','#','='],#A059
                        ['','','=','=','','=','','#'],#A061
                        ['','=','','=','','='],#A062_A063
                        ['','=','','','=','','=','','=','','=','=','','='],#A064_A065
                        
                        ['','=','','=','','='],#O001
                        ['','=','','=',''],#O002
                        ['','#'],#O003
                        ['','='],#O004
                        [''],#O005
                        [''],#O006
                        ['','=','','=',''],#O007
                        ['','=','','=','',''],#O008
                        ['','=','','=','','','=',''],#O009
                        ['','','=','','=','','=','','=',''],#O010
                        ['','=','','=','','=','','=','','=','','','='],#O011
                        ['','=','','=','','=','','=','','=','','','='],#O012
                        ]
        
        self.smiles = ""  
        self.pre_smiles=''
        self.branch_count=1
        self.op_count=0
        self.cycle_count=0
        self.atom_sequence = []#max 70にする
        self.bond_sequence = []
        self.branch_sequence = []
        self.cycle_sequence = []
        self.MF_list = []
        
    def add_frag(self,atom_frag,bond_frag,branch_frag,cycle_frag,position_1):
        # 原子列の追加
        if len(self.atom_sequence)==0:
            atom_frag_copy=deepcopy(atom_frag)
            branch_frag_copy=deepcopy(branch_frag)
            cycle_frag_copy=deepcopy(cycle_frag)
            bond_frag_copy=deepcopy(bond_frag)
            self.atom_sequence.append(atom_frag_copy)
            self.bond_sequence.append(bond_frag_copy)
            if len(np.array(branch_frag_copy).shape)==1:
                self.branch_sequence.append(branch_frag_copy)
            else:
                for b in branch_frag_copy:
                    self.branch_sequence.append(b)                   
            if len(np.array(cycle_frag_copy).shape)==1:
                self.cycle_sequence.append(cycle_frag_copy)
            else:
                for c in cycle_frag_copy:
                    self.cycle_sequence.append(c)
        else:
            if 0<= position_1 <= len(self.atom_sequence[0])-1:
                position_1+=1
                #原子列の作成
                for i in range(len(atom_frag)):
                    self.atom_sequence[0].insert(position_1,atom_frag[-(i+1)])

                #分岐列の作成     
                len_branch_frag=len(branch_frag[0])
                if self.branch_sequence[1][position_1-1]!='':
                    self.branch_sequence[1][position_1-1]=''
                    self.branch_count+=1
                    
                    for i in range(len_branch_frag):
                        self.branch_sequence[0].insert(position_1,branch_frag[0][-(i+1)])
                        self.branch_sequence[1].insert(position_1,branch_frag[1][-(i+1)])
                    self.branch_sequence[0][position_1]+='('
                    self.branch_sequence[1][position_1+len_branch_frag-1]+=')'*self.branch_count
                else:
                    for i in range(len_branch_frag):
                        self.branch_sequence[0].insert(position_1,branch_frag[0][-(i+1)])
                        self.branch_sequence[1].insert(position_1,branch_frag[1][-(i+1)])
                    self.branch_sequence[0][position_1]+='('
                    self.branch_sequence[1][position_1-1+len_branch_frag]+=')'
                
                #bond列の作成
                for i in range(len(bond_frag)):
                    self.bond_sequence[0].insert(position_1,bond_frag[-(i+1)])
                
                    
                #環の情報を追加する
                #環が一次元
                if len(np.array(cycle_frag).shape)==1:
                    po=[]
                    for i in range(len(cycle_frag)):
                        if cycle_frag[i]!='':
                            po.append(i)
                        else:
                            pass
                    for i in range(np.array(self.cycle_sequence).shape[0]):
                        for _ in range(len(cycle_frag)):
                            self.cycle_sequence[i].insert(position_1,'')
                    for _ in range(len(cycle_frag)):
                        self.cycle_sequence.append(['']*len(self.atom_sequence[0]))
                    for p in po:
                        self.cycle_sequence[-1][p+position_1]=1
                    matrix = np.array(cycle_frag)
                    if np.all(matrix == ''):
                        pass
                    else:
                        pass
  
                    
                #環が多次元    
                else:    
                    pos=[]
                    for x in range(np.array(cycle_frag).shape[0]):
                        p=[]
                        for i in range(len(cycle_frag[0])):
                            if cycle_frag[x][i]!='':
                                p.append(i)
                            else:
                                pass
                        pos.append(p)
                    for i in range(np.array(self.cycle_sequence).shape[0]):
                        for _ in range(len(cycle_frag[0])):
                            self.cycle_sequence[i].insert(position_1,'')
                    for _ in range(len(cycle_frag)):
                        self.cycle_sequence.append(['']*len(self.atom_sequence[0]))
                    I=0
                    for po in pos:
                            for p in po:
                                self.cycle_sequence[-1*(I+1)][p+position_1]=1
                            matrix = np.array(cycle_frag)
                            if np.all(matrix == ''):
                                pass
                            else:
                                pass
                            I+=1            
            else:
                pass
                         
    def get_smiles(self,):
        actual_smiles=self.smiles
        smiles = ""
        self.cycle_sequence=remove_empty_rows(self.cycle_sequence)
        #print(len(self.cycle_sequence))
        #print(self.cycle_sequence)
        cycle_sequence=convert_to_corrected_list(self.cycle_sequence)
        #print('cycle_seq;',cycle_sequence)
        for i in range(len(self.atom_sequence[0])):
            x=self.atom_sequence[0][i]
            b=self.bond_sequence[0][i]
            y_s = [sublist[i] for sublist in self.branch_sequence]
            z_s = [sublist[i] for sublist in cycle_sequence]
            
            if y_s[0]!='':
                smiles+=str(y_s[0])
                    
            if b!=' ':
                smiles+=b
                
            smiles += x

            for z in z_s:
                if z!=' ':
                    smiles+=str(z)
            
            if y_s[1]!='':
                smiles+=str(y_s[1])

        self.smiles=smiles
        future_smiles=smiles
        if actual_smiles!=future_smiles:
            self.op_count+=1
        return smiles 
    
    def next_state(self,action):
        index, residue = divmod(action, positions) 
        self.add_frag(self.frag_atom[index], self.frag_bond[index], self.frag_branch[index], self.frag_cycle[index],residue)
        
    def reward(self):
        next_state = self.get_smiles()
        reward = -1
        done = True

        if self.pre_smiles == next_state:
            reward = -1
            done = False
        else:
            count = 5
            if self.op_count > count:
                print(f'Error: op_count > {count}')
                reward = -1
                done = True
                self.pre_smiles = next_state
                return next_state, reward, done

            try:
                mol = Chem.MolFromSmiles(next_state)
                if mol is not None:
                    done = False
                    Morgan_fp = AllChem.GetMorganFingerprintAsBitVect(mol, 2, 2048)
                    ring_info = mol.GetRingInfo()
                    atom_rings = ring_info.AtomRings()
                    
                    if Morgan_fp.GetNumOnBits() > 0:
                        self.MF_list.append(Morgan_fp)
                        if len(self.MF_list) > 1:
                            tanimoto = DataStructs.BulkTanimotoSimilarity(Morgan_fp, self.MF_list[:-1])
                            avg_tanimoto = sum(tanimoto) / len(tanimoto)
                            reward = avg_tanimoto
                    
                        if Descriptors.MolWt(mol) > 1000 or Descriptors.MolWt(mol) < 100:
                            reward = -1
                            
                        if max([len(ring) for ring in atom_rings]) > 6:
                            print('Error: Ring size =', max([len(ring) for ring in atom_rings]))
                            reward = -1
                            
                    else:
                        reward = -1  # empty df
                else:
                    reward = -1  # mol=None
            except Exception as e:
                print(f"An error occurred: {e}")

        self.pre_smiles = next_state
        return next_state, reward, done
    
    def step(self, action):
        self.next_state(action)
        next_state,reward,done = self.reward()
        return next_state, reward, done
    
    def reset(self):
        self.atom_sequence = []
        self.branch_sequence = []
        self.bond_sequence = []
        self.cycle_sequence = []
        self.branch_count=1
        self.op_count=0
        self.cycle_count=0
        

#Agent

mols = len(Donors) + len(Acceptors) + len(Others)

def greedy_probs(Q,state,epsiron=0.2,action_size=positions*mols):
    qs=[Q[state,action] for action in range(action_size)]
    max_action=np.argmax(qs)
    
    base_probs=epsiron/action_size
    action_probs={action:base_probs for action in range(action_size)}
    action_probs[max_action]+=(1-epsiron)
    return action_probs
            
class QLAgent:
    def __init__(self):
        self.gamma = 0.9 #default=0.9
        self.epsilon = 0.1
        self.alpha = 0.8 #default=0.8
        self.action_size = positions*mols

        self.Q = defaultdict(lambda: 0)
        self.memory = []

    def get_action(self, state):
        if np.random.rand()<self.epsilon:
            return np.random.choice(self.action_size)
        else:
            qs=[self.Q[state,a] for a in range(self.action_size)]
            return np.argmax(qs)


    def update(self,state,action,reward,next_state,done):
        if done:
            next_q_max=0
        else:
            next_qs=[self.Q[next_state,a] for a in range(self.action_size)]
            next_q_max=np.argmax(next_qs)
        target=self.gamma * next_q_max + reward
        self.Q[state,action] += (target - self.Q[state,action]) * self.alpha
